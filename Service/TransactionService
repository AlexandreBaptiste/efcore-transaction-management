using System;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace Transactions.Infrastructure.Services;

public class TransactionService : ITransactionService
{
    private readonly DummyContext _dbContext;

    public TransactionService(DummyContext dbContext)
    {
        _dbContext = dbContext ?? throw new ArgumentNullException(nameof(dbContext));
    }

    public async Task<TResult> ExecuteInTransactionAsync<T>(Func<Task<T>> operation)
    {
        if (operation == null) throw new ArgumentNullException(nameof(operation));

        // Not working with in memory database
        var strategy = _dbContext.Database.CreateExecutionStrategy();
        return await strategy.ExecuteAsync(async () =>
        {
            using var transaction = await _dbContext.Database.BeginTransactionAsync();
            try
            {
                var result = await operation();

                // Can be ommited if we use UnitOfWork pattern for example and let UnitOfWork handle SaveChanges 
                await _dbContext.SaveChangesAsync();

                await transaction.CommitAsync();
                return result;
            }
            catch
            {
                // not necessary especially if we have a generic execption middleware
                await transaction.RollbackAsync();
                throw;
            }
        });
    }
}
